# Security-Hardened Multi-Stage Build
# This Dockerfile implements security best practices for production

# Build stage
FROM golang:1.24.6-alpine AS builder

# Install security updates and necessary tools
RUN apk update && apk upgrade && \
    apk add --no-cache \
    git \
    ca-certificates \
    tzdata \
    wget \
    unzip \
    && rm -rf /var/cache/apk/*

# Install protoc
RUN wget https://github.com/protocolbuffers/protobuf/releases/download/v25.1/protoc-25.1-linux-x86_64.zip \
    && unzip protoc-25.1-linux-x86_64.zip -d /usr/local \
    && rm protoc-25.1-linux-x86_64.zip

# Install Go protobuf plugins
RUN go install google.golang.org/protobuf/cmd/protoc-gen-go@latest \
    && go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest \
    && go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@latest

# Set working directory
WORKDIR /app

# Copy go mod files first for better caching
COPY go.mod go.sum ./
RUN go mod download

# Copy source code
COPY . .

# Generate protobuf code
RUN protoc --go_out=. --go_opt=paths=source_relative \
    --go-grpc_out=. --go-grpc_opt=paths=source_relative \
    --grpc-gateway_out=. --grpc-gateway_opt=paths=source_relative \
    proto/auth.proto proto/health.proto

# Build with security flags
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 \
    go build -a -installsuffix cgo \
    -ldflags="-w -s -extldflags '-static'" \
    -o main .

# Security scan the binary (optional)
# RUN go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
# RUN gosec ./...

# Final stage - Security hardened
FROM alpine:3.19

# Install security updates and minimal packages
RUN apk update && apk upgrade && \
    apk add --no-cache \
    ca-certificates \
    tzdata \
    && rm -rf /var/cache/apk/*

# Create non-root user for security
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

# Set working directory
WORKDIR /app

# Copy migrations directory
COPY --from=builder /app/storage/migrations ./storage/migrations

# Copy the binary from builder stage
COPY --from=builder /app/main .

# Set proper ownership
RUN chown -R appuser:appgroup /app

# Create necessary directories with proper permissions
RUN mkdir -p /app/logs /app/tmp && \
    chown -R appuser:appgroup /app/logs /app/tmp && \
    chmod 755 /app && \
    chmod 755 /app/storage && \
    chmod 644 /app/storage/migrations/* && \
    chmod 755 /app/main

# Switch to non-root user
USER appuser

# Expose ports
EXPOSE 8080 8081

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1

# Security labels
LABEL security.owasp.zap.v2.3="OWASP_ZAP_v2.3" \
      security.owasp.zap.v2.3.risk="LOW" \
      security.owasp.zap.v2.3.confidence="HIGH" \
      security.owasp.zap.v2.3.cweid="79" \
      security.owasp.zap.v2.3.desc="Security hardened container with non-root user"

# Run the application
CMD ["./main"]
