# Default values for chat-service subchart
# This is a YAML-formatted file.

# Global configuration
global:
  environment: staging
  clusterDomain: cluster.local
  imageRegistry: ""
  imagePullSecrets: []

# Chat Service configuration
chatService:
  name: chat-service
  replicaCount: 2
  image:
    repository: your-registry/chat-service
    tag: "latest"
    pullPolicy: IfNotPresent
  imagePullSecrets: []
  
  # Service configuration
  service:
    type: ClusterIP
    grpcPort: 8082
    restPort: 8083
    annotations: {}
    
  # Ingress configuration
  ingress:
    enabled: true
    className: nginx
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
      nginx.ingress.kubernetes.io/upstream-vhost: "chat-service.default.svc.cluster.local"
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
    hosts:
      - host: chat-staging.your-domain.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: chat-service-tls
        hosts:
          - chat-staging.your-domain.com

  # Resource limits and requests
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
      
  # Pod security context
  podSecurityContext:
    fsGroup: 1000
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    
  # Container security context
  containerSecurityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1000
    capabilities:
      drop:
        - ALL
    
  # Liveness and readiness probes
  livenessProbe:
    httpGet:
      path: /health
      port: 8083
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    
  readinessProbe:
    httpGet:
      path: /health
      port: 8083
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
    
  # Startup probe
  startupProbe:
    httpGet:
      path: /health
      port: 8083
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  # Configuration
  config:
    environment: "staging"
    logLevel: "info"
    logJsonFormat: true
    tlsEnabled: true
    minTlsVersion: "1.2"
    maxTlsVersion: "1.3"
    
    authService:
      host: "auth-service"
      port: "8081"
      tls: true
    
    openai:
      model: "gpt-3.5-turbo"
      maxTokens: 1000
      temperature: 0.7
      timeout: 30
    
    database:
      user: "postgres"
      password: "password"
      name: "chat_db"
      host: "postgres"
      port: "5432"
      sslMode: "require"
      maxConnections: 10
      maxIdleConnections: 5
      connectionTimeout: 30
    
    rateLimit:
      enabled: true
      requests: 100
      window: 60
    
    securityHeaders:
      enabled: true
      hstsMaxAge: 31536000
      contentSecurityPolicy: "default-src 'self'"
    
    loggingSecurity:
      sensitiveData: false
      requestHeaders: false
      responseBody: false
    
    timeouts:
      healthCheck: 30
      read: 30
      write: 30

  # Secrets
  secrets:
    openaiApiKey: "your-openai-api-key-here"

  # Autoscaling
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  # Node selector, tolerations, and affinity
  nodeSelector: {}
  tolerations: []
  affinity: {}

  # Service account
  serviceAccount:
    create: true
    annotations: {}
    name: ""

  # RBAC
  rbac:
    create: true

  # Network policy
  networkPolicy:
    enabled: true
    ingressRules: []
    egressRules: []

  # Pod disruption budget
  pdb:
    enabled: true
    minAvailable: 1

  # Service monitor for Prometheus
  serviceMonitor:
    enabled: true
    interval: 30s
    scrapeTimeout: 10s
